---

- name: Check installed {{ bdi__name }} version
  shell: 'cat {{ bdi__version_file }} || echo "0.0.0"'
  register: version_cat
  changed_when: 'version_cat.stdout | version_compare(bdi__version, "<")'

- name: Install / Update {{ bdi__name }} version
  when: 'version_cat.stdout | version_compare(bdi__version, "<")'
  vars:
    old_version: '{{ version_cat.stdout }}'
  block:
    - name: Create temporary download directory
      tempfile:
        state: directory
      register: temp_install_dir

    - name: Download {{ bdi__name }} archive
      get_url:
        url: '{{ bdi__download_link }}'
        dest: '{{ temp_install_dir.path }}/archive.tar.gz'
        checksum: '{{ bdi__archive_checksum }}'
        tmp_dest: '{{ temp_install_dir.path }}'

    - name: Extract {{ bdi__name }} archive
      unarchive:
        src: '{{ temp_install_dir.path }}/archive.tar.gz'
        dest: '{{ temp_install_dir.path }}/'
        remote_src: yes
        list_files: yes
      register: archive_files

    - name: Move old files of {{ bdi__name }} to backup folder
      command: 'mv {{ bdi__install_path }} {{ bdi__install_path_backup }}'
      when: 'old_version != "0.0.0"'

    - name: Copy {{ bdi__name }} files to install path
      shell: "mv '{{ temp_install_dir.path }}/{{ bdi__archive_path }}' '{{ temp_install_dir.path }}/{{ bdi__install_path_dir }}' && \
        mv -t '{{ bdi__install_path_base }}' '{{ temp_install_dir.path }}/{{ bdi__install_path_dir }}'"

    - name: Update owner & groups of installed files
      file:
        path: '{{ bdi__install_path }}'
        state: directory
        recurse: yes
        owner: root
        group: root

    - name: Create version file for {{ bdi__name }}
      lineinfile:
        path: '{{ bdi__version_file }}'
        line: '{{ bdi__version }}'
        regexp: '{{ old_version }}'
        create: yes
        owner: root
        group: root

    - name: Remove temporary directory
      file:
        state: absent
        path: '{{ temp_install_dir.path }}'

- name: Create symlinks of executables into path
  file:
    state: link
    src: '{{ bdi__install_path }}/{{ item }}'
    path: '{{ bdi__link_path }}/{{ item }}'
  with_items: '{{ bdi__executables }}'

- name: export variables
  set_fact: >
    bdi__{{ bdi__name }}__version_file={{ bdi__version_file }}
    bdi__{{ bdi__name }}__install_path_base={{ bdi__install_path_base }}
    bdi__{{ bdi__name }}__install_path_dir={{ bdi__install_path_dir }}
    bdi__{{ bdi__name }}__install_path={{ bdi__install_path }}
    bdi__{{ bdi__name }}__updated={{ version_cat.stdout | version_compare(bdi__version, "<") | bool }}
